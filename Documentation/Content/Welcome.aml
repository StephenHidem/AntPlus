<?xml version="1.0" encoding="utf-8"?>
<topic id="5e5a5e1c-a0e6-4ef0-a8f5-12f9394450c4" revisionNumber="1">
	<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
		<introduction>
			<para>
				Welcome to the Small Earth Technology ANT+ class library and examples. My goal is to provide a frictionless
				as possible implementation to enable applications to interface and acquire data from a variety of ANT+
				sensor sources. The primary class is AntPlus and it contains device profiles of ANT+ devices and common data pages.
				The AntRadioInterface class permits different interfaces to the hardware being used and lends itself to
				dependency injection.
			</para>
		</introduction>

		<section>
			<title>Getting Started</title>
			<content>
				<para>
					Become an ANT+ Adopter! There is no membership fee.
					Create a login and go to <a href="https://www.thisisant.com/my-ant/join-adopter">Become an Adopter</a>. This provides you with access to
					device profiles, SDK's, and useful software tools.
					<list class ="bullet">
						Other prerequisites -
						<listItem>
							<para>
								Visual Studio 2022 Community Edition must be installed.
							</para>
						</listItem>
						<listItem>
							<para>
								OPTIONAL: ANT USB stick hardware and device drivers. I use two sticks for testing and some example projects require it.
								You can get them from DigiKey for around $45 for two.
							</para>
						</listItem>
						<listItem>
							<para>
								OPTIONAL: Only needed if you intend to modify the libraries I've provided in the AntUsbStick project.
								Download the <a href="https://www.thisisant.com/resources/ant-windows-library-package-with-source-code/">ANT PC SDK zip file</a>, unblock, and install.
							</para>
						</listItem>
					</list>
				</para>

				<list class="bullet">
					<listItem>
						<para><localUri>ContentLayout.content</localUri> - Use the content layout file to manage the
conceptual content in the project and define its layout in the table of contents.</para>
					</listItem>

					<listItem>
						<para>The <localUri>.\media</localUri> folder - Place images in this folder that you will reference
from conceptual content using <codeInline>medialLink</codeInline> or <codeInline>mediaLinkInline</codeInline>
elements.  If you will not have any images in the file, you may remove this folder.</para>
					</listItem>

					<listItem>
						<para>The <localUri>.\icons</localUri> folder - This contains a default logo for the help file.  You
may replace it or remove it and the folder if not wanted.  If removed or if you change the file name, update
the <ui>Transform Args</ui> project properties page by removing or changing the filename in the
<codeInline>logoFile</codeInline> transform argument.  Note that unlike images referenced from conceptual topics,
the logo file should have its <legacyBold>BuildAction</legacyBold> property set to <codeInline>Content</codeInline>.</para>
					</listItem>

					<listItem>
						<para>The <localUri>.\Content</localUri> folder - Use this to store your conceptual topics.  You may
name the files and organize them however you like.  One suggestion is to lay the files out on disk as you have
them in the content layout file as shown in this project but the choice is yours.  Files can be added via the
Solution Explorer or from within the content layout file editor.  Files must appear in the content layout file
in order to be compiled into the help file.</para>
					</listItem>
				</list>

				<para>See the <legacyBold>Conceptual Content</legacyBold> topics in the Sandcastle Help File Builder's
help file for more information.  See the <legacyBold> Sandcastle MAML Guide</legacyBold> for details on Microsoft
Assistance Markup Language (MAML) which is used to create these topics.</para>
			</content>
		</section>

		<relatedTopics>
			<link xlink:href="4a8ae1c2-5d9b-4e27-bd18-34b479401b65" />
		</relatedTopics>
	</developerConceptualDocument>
</topic>
