<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>How-To: Create and Add a Custom AntDevice to Host</title><meta name="Title" content="How-To: Create and Add a Custom AntDevice to Host" /><meta name="Help.Id" content="0e424769-d4c6-4a98-9384-a810421ad5e1" /><meta name="Help.ContentType" content="How To" /><meta name="guid" content="0e424769-d4c6-4a98-9384-a810421ad5e1" /><meta name="Description" content="This how-to walks through the steps taken to create a custom AntDevice and add it to the host container. We will use the ANT+ device profile Bike Radar to illustrate the procedure. The example WpfUsbStickApp illustrates the full example." /><meta name="tocFile" content="../toc/IDE.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">Small Earth Technology ANT+ Class Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>How-To: Create and Add a Custom AntDevice to Host</h1><div><p>
				This how-to walks through the steps taken to create a custom AntDevice and add it to the host container.
				We will use the ANT+ device profile Bike Radar to illustrate the procedure. The example WpfUsbStickApp
				illustrates the full example.
			</p><p>
				Classes derived from AntDevice inherit from the CommunityToolkit.Mvvm NuGet package. This is a very
				useful package providing robust support for notifications, commanding, and more.
			</p></div><h3 class="quickLinkHeader">Create the custom ANT device class</h3><div><ol><li><p>Add the NuGet package SmallEartTech.AntPlus.Extensions.Hosting to the application project.</p></li><li><p>Add a new class named BikeRadar and derive from AntDevice.</p><p>
							AntDevice is declared as an ObservableObject. Therefore, your class declaration will include
							the partial modifier.
						</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">namespace WpfUsbStickApp.CustomAntDevice
{
    public partial class BikeRadar : AntDevice
    {
    }
}</code></pre></div></div></li><li><p>
							Add a PNG file to use as an image/icon to the project and set the build action to "Embedded Resource".
							The Bike Radar image was copied from the Bike Radar specification and saved as a PNG in the
							CustomAntDevice solution folder.
						</p></li><li><p>
							Implement required properties in the BikeRadar class. You will override ChannelCount, DeviceImageStream,
							and ToString.
						</p><article class="message is-warning"><div class="message-header"><p><span class="icon"><i class="fa fa-warning"></i></span>  Important</p></div><div class="message-body"><p>
								You need to manually declare your ANT specific device class! This const is used as a key when
								added to the DI container and the AntCollection will instantiate a device with this key.
							</p></div></article><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">public const byte DeviceClass = 40;        // this value comes from the Bike Radar device type

public override int ChannelCount =&gt; 4084;   // from master channel period in Bike Radar spec

public override Stream? DeviceImageStream =&gt; GetType().Assembly.GetManifestResourceStream("WpfUsbStickApp.CustomAntDevice.BikeRadar.png");

public override string ToString() =&gt; "Bike Radar";</code></pre></div></div><p>
							Generate the constructor from quick refactorings. This should add some more required namespaces.
							Change the constructor signature to declare the device specific logger. Bike Radar also supports
							CommonDataPages. The list of radar targets is initialized.
						</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">public BikeRadar(ChannelId channelId, IAntChannel antChannel, ILogger&lt;BikeRadar&gt; logger, TimeoutOptions? options)
    : base(channelId, antChannel, logger, options)
{
    CommonDataPages = new CommonDataPages(logger);
    for (int i = 0; i &lt; 8; i++) { RadarTargets.Add(new RadarTarget()); }
}</code></pre></div></div></li><li><p>Define the device specific data pages.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">/// &lt;summary&gt;Bike radar data pages.&lt;/summary&gt;
public enum DataPage
{
    Unknown = 0,
    /// &lt;summary&gt;Status&lt;/summary&gt;
    DeviceStatus = 1,
    /// &lt;summary&gt;Commend&lt;/summary&gt;
    DeviceCommand = 2,
    /// &lt;summary&gt;Page A: targets 1 - 4&lt;/summary&gt;
    RadarTargetsA = 48,
    /// &lt;summary&gt;Page B: targets 5 - 8&lt;/summary&gt;
    RadarTargetsB = 49,
}</code></pre></div></div></li><li><p>
							Add custom properties the device supports. Add CommonDataPages property if the device supports it.
						</p><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Note</p></div><div class="message-body"><p>
								The CommunityToolkit.Mvvm supports properties with ObservableProperty attribute. This attribute
								requires the property declaration to be private and the first letter of the property name set as
								lowercase. The CommunityToolkit generated partial class uses this private declaration as a
								backing store and will create a public property with the first letter capitalized.
							</p></div></article><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">public enum DeviceState
{
    Broadcasting,
    ShutdownRequested,
    ShutdownAborted,
    ShutdownForced
}

public enum ThreatLevel
{
    None,
    Approaching,
    FastApproach,
    Reserved
}

public enum ThreatSide
{
    Behind,
    Right,
    Left,
    Reserved
}

public partial class RadarTarget : ObservableObject
{
    [ObservableProperty]
    private ThreatLevel threatLevel;
    [ObservableProperty]
    private ThreatSide threatSide;
    [ObservableProperty]
    private double range;
    [ObservableProperty]
    private double closingSpeed;
}

[ObservableProperty]
private DeviceState state;
[ObservableProperty]
private bool clearTargets;
public List&lt;RadarTarget&gt; RadarTargets { get; } = new();
public CommonDataPages CommonDataPages { get; }</code></pre></div></div></li><li><p>
							Override Parse. Set the custom properties and/or internal state according to the data page.
							Parse common data pages in the default clause.
						</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">public override void Parse(byte[] dataPage)
{
    uint ranges;
    ushort speeds;

    base.Parse(dataPage);
    switch ((DataPage)dataPage[0])
    {
        case DataPage.Unknown:
            break;
        case DataPage.DeviceStatus:
            State = (DeviceState)(dataPage[1] &amp; 0x03);
            ClearTargets = (dataPage[7] &amp; 0x01) == 0;
            break;
        case DataPage.DeviceCommand:
            break;
        case DataPage.RadarTargetsA:
            ranges = BitConverter.ToUInt32(dataPage, 3) &amp; 0x00FFFFFF;
            speeds = BitConverter.ToUInt16(dataPage, 6);
            for (int i = 0; i &lt; 4; i++)
            {
                var threatLevel = RadarTargets[i].ThreatLevel = (ThreatLevel)((dataPage[1] &gt;&gt; (i * 2)) &amp; 0x03);
                RadarTargets[i].ThreatSide = threatLevel == ThreatLevel.None ? ThreatSide.Behind : (ThreatSide)((dataPage[2] &gt;&gt; (i * 2)) &amp; 0x03);
                RadarTargets[i].Range = threatLevel == ThreatLevel.None ? 0 : 3.125 * (ranges &gt;&gt; (i * 6) &amp; 0x3F);
                RadarTargets[i].ClosingSpeed = threatLevel == ThreatLevel.None ? 0 : 3.04 * (speeds &gt;&gt; (i * 4) &amp; 0x0F);
            }
            break;
        case DataPage.RadarTargetsB:
            ranges = BitConverter.ToUInt32(dataPage, 3) &amp; 0x00FFFFFF;
            speeds = BitConverter.ToUInt16(dataPage, 6);
            for (int i = 0; i &lt; 4; i++)
            {
                var threatLevel = RadarTargets[i + 4].ThreatLevel = (ThreatLevel)((dataPage[1] &gt;&gt; (i * 2)) &amp; 0x03);
                RadarTargets[i + 4].ThreatSide = threatLevel == ThreatLevel.None ? ThreatSide.Behind : (ThreatSide)((dataPage[2] &gt;&gt; (i * 2)) &amp; 0x03);
                RadarTargets[i + 4].Range = threatLevel == ThreatLevel.None ? 0 : 3.125 * (ranges &gt;&gt; (i * 6) &amp; 0x3F);
                RadarTargets[i + 4].ClosingSpeed = threatLevel == ThreatLevel.None ? 0 : 3.04 * (speeds &gt;&gt; (i * 4) &amp; 0x0F);
            }
            break;
        default:
            CommonDataPages.ParseCommonDataPage(dataPage);
            break;
    }
}</code></pre></div></div></li><li><p>
							Add custom methods to send commands to the ANT device.
						</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">public enum Command
{
    AbortShutdown,
    Shutdown
}

public async Task&lt;MessagingReturnCode&gt; Shutdown(Command command)
{
    return await SendExtAcknowledgedMessage(new byte[8] { (byte)DataPage.DeviceCommand, (byte)command, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF });
}</code></pre></div></div></li><li><p>Add your custom device to the host services collection. This must be a keyed transient.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">// dependency services
_host = Host.CreateDefaultBuilder(Environment.GetCommandLineArgs()).
    UseSerilog().
    UseAntPlus().   // this adds all the required dependencies to use the ANT+ class library
    ConfigureServices(services =&gt;
    {
        // add the implementation of IAntRadio to the host
        services.AddSingleton&lt;IAntRadio, AntRadio&gt;();

        // add custom device to the host
        services.AddKeyedTransient&lt;AntDevice, BikeRadar&gt;(BikeRadar.DeviceClass);
    }).
    Build();</code></pre></div></div></li></ol><p>
						 You have now added a custom device to the services that can be instantiated by AntCollection.
						 The next steps would be to implement the view and view model for your custom ANT device to use
						 in your application.
					 </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Other Resources</h4><div><a href="825ed94a-e668-4d28-85ff-53cbb962a355.htm">ANT+ Hosting Extensions Overview</a></div><div><a href="27d74052-f564-4aaa-97a0-5f166ffd5ce3.htm">Examples Overview</a></div><div><a href="https://github.com/CommunityToolkit/dotnet" target="_blank" rel="noopener noreferrer">CommunityToolkit.Mvvm</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Create the custom ANT device class</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column">Documentation built 09/13/2025 13:02:16.<p>© 2022 Stephen Hidem.</p> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>