<?xml version="1.0" encoding="utf-8"?>
<topic id="27d74052-f564-4aaa-97a0-5f166ffd5ce3" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>
				These examples illustrate how to use the class libraries.
			</para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
      </content>
			<sections>
				<section>
					<title>AntUsbStick Class Library</title>
					<content>
						<para>
							This example implements the Small Earth Technology ANT radio interface. This class library is used by the example applications.
							It supports Garmin/Dynastream ANT USB sticks and some development boards with USB interfaces. It is also available on
							<externalLink>
								<linkText>NuGet.</linkText>
								<linkUri>https://www.nuget.org/packages/SmallEarthTech.AntUsbStick</linkUri>
							</externalLink>
						</para>
						<alert class="important">
							<para>Projects that consume this library must set the platform target to x86. This is due to the native DLLs that are a part of this library.</para>
						</alert>
						<para>
							AntUsbStick provides two primary classes to consuming applications - AntRadio and AntChannel. AntRadio handles global
							ANT USB stick radio settings and operation. AntChannel handles individual channel configuration and communication with ANT devices.
						</para>
						<para>
							AntRadio implements IAntRadio, IAntConfiguration, IAntControl, ICrypto, IFitSettings, and IAntUsbRadio
							interfaces. This is specific to Garmin/Dynastream ANT USB sticks.
							UsbAntResponse derives from AntResponse. It provides access to ANT response messages specific to Garmin/Dynastream ANT USB sticks.
							UsbDeviceCapabilities derives from DeviceCapabilities. It provides access to ANT device capabilities specific to Garmin/Dynastream ANT USB sticks.
						</para>
					</content>
				</section>
				<section>
					<title>WpfUsbStickApp WPF Application</title>
					<content>
						<para>
							The WpfUsbStickApp example demonstrates a host builder, using the <link xlink:href="825ed94a-e668-4d28-85ff-53cbb962a355">hosting extensions</link>,
							connecting to a Garmin/Dynastream ANT USB stick, enumerating ANT devices via the AntCollection service,
							and interacting with ANT devices. The ANT USB stick class library is initialized for continuous receive scan mode.
						</para>
						<alert class="note">
							<para>This project uses the AntUsbSick library. Therefore, the platform target is set to x86. This is due to the native DLLs that are a part of this project.</para>
						</alert>
					</content>
				</section>
				<section>
					<title>AntMulticastServer Console Application</title>
					<content>
						<alert class="warning">
							<para>
								This application is no longer being updated or maintained. It was intended to support Xamarin apps. Xamarin has been superceded by .NET MAUI.
							</para>
						</alert>
						<para>
							This application creates an IPv6 UdpClient bound to port number 2000. The UdpClient directs all messages received from the
							AntDeviceCollection to the multicast group [::] (all interfaces on the local subnet), port number 55436. A Xamarin
							client example (Android only) is available as a separate solution at
							<externalLink>
								<linkText>XamAntClientApp.</linkText>
								<linkUri>https://github.com/StephenHidem/XamAntClientApp/</linkUri>
							</externalLink>
						</para>
					</content>
				</section>
			</sections>
		</section>
		<section address="Section4">
			<title>.NET MAUI/gRPC Example Projects</title>
			<content>
				<para>
					This group of examples is comprised of four projects. AntGrpcShared is a class library providing a gRPC client/server to be consumed by the other
					projects. AntGrpcService is a Windows service that provides services to connect to and communicate with an ANT USB stick.
					The MauiAntClientApp is a .NET MAUI project and gRPC client that is used to demonstrate Windows/Android applications that work with the
					remote server application on a local subnet. <legacyBold>I have not tested the other platforms supported by .NET MAUI.</legacyBold>
				</para>
				<para>
					See the <link xlink:href="3ab7deee-1a9a-4d77-9fc4-14343f3bd1ca">MAUI-gRPC Examples</link> topic for more information.
				</para>
			</content>
			<!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible. -->
		</section>

		<relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
