<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>MAUI-gRPC Example Overview</title><meta name="Title" content="MAUI-gRPC Example Overview" /><meta name="Help.Id" content="3ab7deee-1a9a-4d77-9fc4-14343f3bd1ca" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="3ab7deee-1a9a-4d77-9fc4-14343f3bd1ca" /><meta name="Description" content="This example consists of three projects. AntGrpcShared is a class library providing a gRPC client/server to be consumed by the other projects." /><meta name="tocFile" content="../toc/Root.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">Small Earth Technology ANT+ Class Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>MAUI-gRPC Example Overview</h1><div><p>
		  This example consists of three projects. AntGrpcShared is a class library providing a gRPC client/server to be consumed by the other
		  projects. AntGrpcServr is a server console application that provides services to connect to and communicate with an ANT USB stick.
		  The MauiAntClientApp is a .NET MAUI project and gRPC client that is used to demonstrate Windows/Android applications that work with the
		  remote server application on a local subnet. <strong>I have not tested the other platforms supported by .NET MAUI.</strong></p></div><h2 id="Section1" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>The MAUI Example Projects</h2><div id="IDDABSection"><p>A brief overview of the projects in this example.</p><h4 id="SubSection1" class="quickLinkHeader">AntGrpcShared</h4><p>
					  This class library is configured as a gRPC client/server library. The .proto files define the messages and data exchanged
					  between client and server implementations.
				  </p><h4 id="SubSection2" class="quickLinkHeader">AntGrpcServer</h4><p>
					  The server is a console application that runs on the host PC that has an ANT USB stick connected to it. Three services are
					  provided.
				  </p><p>
					  The DiscoveryService replies to clients over a UDP multicast port on the local subnet. This allows clients to obtain
					  the URI of the server and connect to the gRPC channel. Think of it as a poor man's service discovery protocol. No authentication
					  or validation is performed.
				  </p><p>
					  The AntRadioService provides methods to get information about the connected ANT USB stick, intialize for continuous scan mode,
					  and get channels to communicate with ANT devices via the AntChannelService.
				  </p><p>
					  The AntChannelService has a method to subscribe to a gRPC stream of ANT messages when the ANT USB stick has been initialized
					  for continuous scan mode. The remaining gRPC/ANT radio channels are used to send extended acknowledged messages to individual
					  ANT devices.
				  </p><h4 id="SubSection3" class="quickLinkHeader">MauiAntClientApp</h4><p>
					  The client app is the consumer of the client services provided by AntGrpcShared project. The server URI is first obtained via
					  a UDP mulicast message, a gRPC connection to the server is established, and then requests to initialize and communicate with the
					  remote ANT USB stick are invoked.
				  </p></div><h2 id="Section2" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>How It Works</h2><div id="IDEABSection"><p>
				  UDP multicast is used for service discovery and https is used for communication between client and server. The multicast discovery
				  is invoked first to obtain the server URI, then the server gRPC channel (this is NOT an ANT channel) is connected to using the
				  IP address obtained from the reply to the UDP message. I'm assuming the server and client app are on the same local subnet.
			  </p><p>
				  The UDP multicast endpoint is 239.55.43.6:55437. This is an arbitrary assignment in the multicast address range. You are certainly
				  welcome to select your own address and port. The message sent/received is not relevant in this example, we're just interested in
				  the server IP address in the received message. This is used in the next step to form the URI to connect to the gRPC server channel.
			  </p><p>
				  The client then connects to the gRPC server. The URI is constructed from the server IP address and the arbitrary port number
				  created when the AntGrpcServer project was created. The AntGrpcServer launchSettings.json file has the port number. Two protocols
				  are defined in launchSettings.json; I'm using the https port number. Once the client is connected to the server the client initializes
				  continuous scan mode. The client then subscribes to streaming messages from ANT channel 0 and the client app is up and running.
			  </p></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">The MAUI Example Projects</a><ul class="menu"><li><a class="quickLink">AntGrpcShared</a></li><li><a class="quickLink">AntGrpcServer</a></li><li><a class="quickLink">MauiAntClientApp</a></li></ul></li><li><a class="quickLink">How It Works</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"><p>© 2022 Stephen Hidem.</p> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
});</script></body></html>